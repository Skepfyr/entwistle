@as: /as\b/
@break: /break\b/
@const: /const\b/
@continue: /continue\b/
@crate: /crate\b/
@else: /else\b/
@enum: /enum\b/
@extern: /extern\b/
@false: /false\b/
@fn: /fn\b/
@for: /for\b/
@if: /if\b/
@impl: /impl\b/
@in: /in\b/
@let: /let\b/
@loop: /loop\b/
@match: /match\b/
@mod: /mod\b/
@move: /move\b/
@mut: /mut\b/
@pub: /pub\b/
@ref: /ref\b/
@return: /return\b/
@self: /self\b/
@Self: /Self\b/
@static: /static\b/
@struct: /struct\b/
@super: /super\b/
@trait: /trait\b/
@true: /true\b/
@type: /type\b/
@unsafe: /unsafe\b/
@use: /use\b/
@where: /where\b/
@while: /while\b/
@async: /async\b/
@await: /await\b/
@dyn: /dyn\b/

@abstract: /abstract\b/
@become: /become\b/
@box: /box\b/
@do: /do\b/
@final: /final\b/
@macro: /macro\b/
@override: /override\b/
@priv: /priv\b/
@typeof: /typeof\b/
@unsized: /unsized\b/
@virtual: /virtual\b/
@yield: /yield\b/
@try: /try\b/

@union: /union\b/
@StaticLifetime: "'" static

@StrictKeyword:
  as
  break
  const
  continue
  crate
  else
  enum
  extern
  false
  fn
  for
  if
  impl
  in
  let
  loop
  match
  mod
  move
  mut
  pub
  ref
  return
  self
  Self
  static
  struct
  super
  trait
  true
  type
  unsafe
  use
  where
  while
  async
  await
  dyn

@ReservedKeyword:
  abstract
  become
  box
  do
  final
  macro
  override
  priv
  typeof
  unsized
  virtual
  yield
  try

@WeakKeyword:
  union
  StaticLifetime

@Keyword: StrictKeyword | ReservedKeyword | WeakKeyword
@IdentifierOrKeyword: /[a-zA-Z][a-zA-Z0-9_]*|_[a-zA-Z0-9_]+\b/
@RawIdentifierName: (!>> crate | self | super | Self) IdentifierOrKeyword
@RawIdentifier: "r#" RawIdentifierName
@NonKeywordIdentifier: (!>> StrictKeyword | ReservedKeyword) IdentifierOrKeyword
@Identifier:
  NonKeywordIdentifier
  RawIdentifier

-_:
  Whitespace
  Whitespace? Comment Whitespace?

Comment:
  LineComment
  BlockComment
LineComment: '//' /([^\/!\n]|\/\/)[^\n]*/? '\n'
BlockComment:
  '/*' (/[^*!]/ | '**' | BlockCommentOrDoc) (BlockCommentOrDoc | (/[^*]/ | '*' (!>> '/')))* '*' '/'
  '/*' '*' '/'
  '/*' '*' '*' '/'

InnerLineDoc: '//' '!' /[^\r\n]+/? Newline
InnerBlockDoc: '/*' '!' (BlockCommentOrDoc | (/[^*\r]/ | '*' (!>> '/') | '\r' '\n'))* '*/'
OuterLineDoc: '//' '/' /[^\/\r\n][^\r\n]*/? Newline
OuterBlockDoc: '/*' '*' (/[^*]/ | BlockCommentOrDoc) (BlockCommentOrDoc | (/[^*\r]/ | '*' (!>> '/') | '\r' '\n'))* '*/'

BlockCommentOrDoc: BlockComment | InnerBlockDoc | OuterBlockDoc

@Whitespace: /\s+/

@EscapedNewline: "\\n"
@EscapedCarriageReturn: "\\r"
@EscapedTab: "\\t"
@EscapedBackslash: "\\\\"
@EscapedNull: "\\0"
@EscapedSingleQuote: "\\'"
@EscapedDoubleQuote: #"\\""#
@EscapedAsciiChar: /\\x[0-7][0-9a-fA-F]/
@EscapedByte: /\\x[0-9a-fA-F]{2}/
@EscapedUnicodeChar: /\\u\{([0-9a-fA-F]_*){1,6}\}/

-@AsciiEscape:
  EscapedAsciiChar
  EscapedNewline
  EscapedCarriageReturn
  EscapedTab
  EscapedBackslash
  EscapedNull

-@ByteEscape:
  EscapedByte
  EscapedNewline
  EscapedCarriageReturn
  EscapedTab
  EscapedBackslash
  EscapedNull

-@UnicodeEscape:
  EscapedUnicodeChar

-@QuoteEscape:
  EscapedSingleQuote
  EscapedDoubleQuote

@Newline: "\n" | "\r\n"
@StringContinue: "\\" Newline

@StringChar:
  QuoteEscape
  AsciiEscape
  UnicodeEscape
  /\P{C}/
@ByteChar:
  QuoteEscape
  ByteEscape
  /[ -~]/

-@NonSingleQuoteStringChar: (!>> "'") StringChar
Character: "'" NonSingleQuoteStringChar "'"

-@NonDoubleQuoteStringChar: (!>> '"') (StringChar | StringContinue)
String: '"' NonDoubleQuoteStringChar* '"'

-@RawStringChar: /[\P{C}[^"#]]/
RawStringContents<Hashes>: (RawStringChar | '#' | '"' (!>> Hashes))*
RawString:
  'r' '"' RawStringContents<> '"'
  'r' '"' RawStringContents<'#'> '"'
  'r' '#' '#' '"' RawStringContents<'#' '#'> '"' '#' '#'


-@NonSingleQuoteByteChar: (!>> "'") ByteChar
Byte: "b'" NonSingleQuoteByteChar "'"

-@NonDoubleQuoteByteChar: (!>>'"') ByteChar
ByteString: 'b"'# NonDoubleQuoteByteChar* '"'

-@RawByteStringChar: /[[:ascii:][^"#]]/
RawByteStringContents<Hashes>: (RawByteStringChar | '#' | '"' (!>> Hashes))*
RawByteString:
  'br' '"' RawStringContents<> '"'
  'br' '#' '"' RawStringContents<'#'> '"' '#'
  'br' '#' '#' '"' RawStringContents<'#' '#'> '"' '#' '#'

@Integer:
  /[0-9_]+/
  /0x[0-9a-fA-F_]+/
  /0o[0-7_]+/
  /0b[01_]+/
@Float: /[0-9_]+(.[0-9_]+)?((e|E)(\+|-)[0-9_]+)?/
@Number: Integer | Float

TupleIndex: Integer

@Bool: "true" | "false"

@LifetimeToken: "'" IdentifierOrKeyword
@LifetimeOrLabel: "'" NonKeywordIdentifier

# These have been carefully ordered so that prefixes come second.
@PunctuationNoDollarOrDelimitersOrMacroRepOp:
  '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '<<=' | '>>='
  '&&' | '||' | '<<' | '>>'
  '==' | '!=' | '<=' | '<' | '>=' | '>'
  '@' | '_' | '.' | '..' | '...' | ',' | ';' | ':' | '::' | '->' | '=>'
  '#' | '~' | '=' | '+' | '-' | '/' | '%' | '^' | '!' | '&' | '|'
@PunctuationNoDelimitersOrMacroRepOp: PunctuationNoDollarOrDelimitersOrMacroRepOp | '$'
@PunctuationNoDollarOrDelimiters: PunctuationNoDelimitersOrMacroRepOp | '$' | '*' | '+' | '?'
@PunctuationNoDelimiters: PunctuationNoDollarOrDelimiters | '$'

TokenNoPunctuation:
  Keyword
  Identifier
  LiteralExpression
  LifetimeToken

TokenNoDelimitersOrMacroRepOp: TokenNoPunctuation | PunctuationNoDelimitersOrMacroRepOp
TokenNoDelimiters: TokenNoPunctuation | PunctuationNoDelimiters
TokenNoDollarOrDelimiters: TokenNoPunctuation | PunctuationNoDollarOrDelimiters

MacroInvocation: SimplePath _ '!' _ DelimTokenTree
DelimTokenTree:
  '(' _ (TokenTree _)* ')'
  '[' _ (TokenTree _)* ']'
  '{' _ (TokenTree _)* '}'
TokenTree: TokenNoDelimiters | DelimTokenTree
MacroInvocationSemi:
  SimplePath _ '!' _ '(' _ (TokenTree _)* ')' _ ';'
  SimplePath _ '!' _ '[' _ (TokenTree _)* ']' _ ';'
  SimplePath _ '!' _ '{' _ (TokenTree _)* '}'

MacroRulesDefinition: /macro_rules\b/ _ '!' _ Identifier _ MacroRulesDef
MacroRulesDef:
  '(' _ (MacroRule _)* ')' _ ';'
  '[' _ (MacroRule _)* ']' _ ';'
  '{' _ (MacroRule _)* '}'
MacroRules: MacroRule (_ ';' _ MacroRule)* (_ ';')?
MacroRule: MacroMatcher _ '=>' _ MacroTranscriber
MacroMatcher:
  '(' _ (MacroMatch _)* ')'
  '[' _ (MacroMatch _)* ']'
  '{' _ (MacroMatch _)* '}'
MacroMatch:
  TokenNoDollarOrDelimiters
  MacroMatcher
  '$' _ (IdentifierOrKeywordNoCrate | RawIdentifier | '_') _ ':' _ MacroFragSpec
  '$' _ '(' _ (MacroMatch _)+ ')' _ (MacroRepSep _)? MacroRepOp
@IdentifierOrKeywordNoCrate: (!>> crate) IdentifierOrKeyword
MacroFragSpec:
  'block' | 'expr' | 'ident' | 'item' | 'lifetime' | 'literal' | 'meta'
  'pat' | 'pat_param' | 'path' | 'stmt' | 'tt' | 'ty' | 'vis'
MacroRepSep: TokenNoDelimitersOrMacroRepOp
@MacroRepOp: '*' | '+' | '?'
MacroTranscriber: DelimTokenTree

Crate: Utf8Bom? (Shebang Newline)? _ (InnerAttribute _)* (Item _)*

== Crate
==
==

@Utf8Bom: "\uFEFF"
Shebang: "#!" Whitespace* BlockComment? Whitespace* (/[^\[\n\r]/ /[^\n\r]/+)?

-CommaSeparated<Item>: Item (_ "," _ Item)? (_ ",")?

ConfigurationPredicate:
  ConfigurationOption
  ConfigurationAll
  ConfigurationAny
  ConfigurationNot

ConfigurationOption: Identifier ("=" (String | RawString))?
ConfigurationAll: "all(" ConfigurationPredicateList? ")"
ConfigurationAny: "any(" ConfigurationPredicateList? ")"
ConfigurationNot: "not(" ConfigurationPredicateList? ")"
ConfigurationPredicateList: CommaSeparated<ConfigurationPredicate>

CfgAttribute: "cfg(" ConfigurationPredicate ")"
CfgAttrAttribute: "cfg_attr(" _ ConfigurationPredicate _ "," _ CfgAttrs? _ ")"
CfgAttrs: CommaSeparated<Attr>

Item: (OuterAttribute _)* (VisItem | MacroItem)
VisItem: Visibility InnerItem
-InnerItem:
  Module
  ExternCrate
  UseDeclaration
  Function
  TypeAlias
  Struct
  Enumeration
  Union
  ConstantItem
  StaticItem
  Trait
  Implementation
  ExternBlock

MacroItem: MacroInvocationSemi | MacroRulesDefinition

Module:
  unsafe? _ mod _ Identifier _ ";"
  unsafe? _ mod _ Identifier "{" _ (InnerAttribute _)* (Item _)* "}"

ExternCrate: extern _ crate _ CrateRef (_ AsClause)? _ ";"
CrateRef: Identifier | self
AsClause: as _ (Identifier | "_")

UseDeclaration: use _ UseTree _ ";"
UseTree:
  ((SimplePath _)? "::" _)? "*"
  ((SimplePath _)? "::" _)? "{" _ CommaSeparated<UseTree>? _ "}"
  SimplePath (_ as _ (Identifier | "_"))?

Function: (const _)? (async _)? (unsafe _)? (extern _ Abi? _)? fn _ Identifier _ GenericParams? "(" _ FunctionParameters? _ ")" _ (FunctionReturnType _)? WhereClause? (BlockExpression | ";")

Abi: String | RawString

FunctionParameters:
  SelfParam (_ ",")?
  (SelfParam _ "," _)? CommaSeparated<FunctionParam>

SelfParam: (OuterAttribute _)* (ShorthandSelf | TypedSelf)
ShorthandSelf: ("&" Lifetime?)? _ (mut _)? self
TypedSelf: (mut _)? self _ ":" _ Type

FunctionParam: (OuterAttribute _)* (FunctionParamPattern | "...")
FunctionParamPattern: Pattern _ ":" _ (Type | "...")

FunctionReturnType: "->" _ Type

TypeAlias: type _ Identifier _ GenericParams? _ WhereClause? "=" _ Type _ ";"

Struct: StructStruct | TupleStruct
StructStruct: struct _ Identifier _ GenericParams? WhereClause? ("{" _ (StructFields? _) "}" | ";")
TupleStruct: struct _ Identifier _ GenericParams? "(" _ (TupleFields _)? ")" WhereClause? ";"

StructFields: CommaSeparated<StructField>
StructField: (OuterAttribute _)* (Visibility _)? Identifier _ ":" _ Type

TupleFields: CommaSeparated<TupleField>
TupleField: (OuterAttribute _)* (Visibility _)? Type

Enumeration: enum _ Identifier _ (GenericParams _)? (WhereClause _)? "{" _ EnumItems? _ "}"
EnumItems: CommaSeparated<EnumItem>
EnumItem: (OuterAttribute _)* (Visibility _)? Identifier (_ (EnumItemTuple | EnumItemStruct | EnumItemDiscriminant))?
EnumItemTuple: "(" _ (TupleFields _)? ")"
EnumItemStruct: "{" _ StructFields? _ "}"
EnumItemDiscriminant: "=" Expression

Union: union _ Identifier _ GenericParams? WhereClause? "{" _ StructFields _ "}"

ConstantItem: const _ (Identifier | "_") _ ":" _ Type _ ("=" _ Expression _)? ";"
StaticItem: static _ (mut _)? Identifier _ ":" _ Type _ ("=" _ Expression _)? ";"

Trait: (unsafe _)? trait _ Identifier _ GenericParams? (":" _ TypeParamBounds?)? WhereClause? "{" InnerAttribute* AssociatedItem* "}"
Implementation: InherentImpl | TraitImpl
InherentImpl: impl _ (GenericParams _)? Type _ (WhereClause _)? "{" _ (InnerAttribute _)* (AssociatedItem _)* "}"
TraitImpl: (unsafe _)? impl _ GenericParams? "!"? _ TypePath _ for _ Type _ WhereClause? "{" InnerAttribute* AssociatedItem* "}"

ExternBlock: (unsafe _)? extern _ Abi? _ "{" InnerAttribute* ExternalItem* "}"
ExternalItem: (OuterAttribute _)* (MacroInvocationSemi | ((Visibility _)? (StaticItem | Function)))

GenericParams: "<" CommaSeparated<GenericParam>? ">"
GenericParam: (OuterAttribute _)* (LifetimeParam | TypeParam | ConstParam)
LifetimeParam: LifetimeOrLabel (_ ":" _ LifetimeBounds)?
TypeParam: Identifier (_ ":" _ TypeParamBounds?)? (_ "=" _ Type)?
ConstParam: const _ Identifier _ ":" _ Type

WhereClause: where _ CommaSeparated<WhereClauseItem>
WhereClauseItem: LifetimeWhereClauseItem | TypeBoundWhereClauseItem
LifetimeWhereClauseItem: Lifetime _ ":" _ LifetimeBounds
TypeBoundWhereClauseItem: (ForLifetimes _)? Type _ ":" (_ TypeParamBounds)?

AssociatedItem: (OuterAttribute _)* (MacroInvocationSemi | ((Visibility _)? (TypeAlias | ConstantItem | Function)))


InnerAttribute: "#![" _ Attr _ "]" | InnerLineDoc | InnerBlockDoc
OuterAttribute: "#[" _ Attr _ "]" | OuterLineDoc | OuterBlockDoc
Attr: SimplePath (_ AttrInput)?
AttrInput: DelimTokenTree | "=" _ LiteralExpression

MetaItem:
  SimplePath
  SimplePath _ "=" _ LiteralExpression
  SimplePath "(" MetaSeq? ")"
MetaSeq: CommaSeparated<MetaItemInner>
MetaItemInner: MetaItem | LiteralExpression

MetaWord: Identifier
MetaNameValueStr: Identifier _ "=" _ (String | RawString)
MetaListPaths: Identifier _ "(" CommaSeparated<SimplePath> ")"
MetaListIdents: Identifier _ "(" CommaSeparated<Identifier> ")"
MetaListNameValueStr: Identifier _ "(" CommaSeparated<MetaNameValueStr> ")"



Statement:
  ";"
  Item
  LetStatement
  ExpressionStatement
  MacroInvocationSemi
LetStatement: (OuterAttribute _)* let _ Pattern _ (":" _ Type _)? ("=" _ Expression)? ";"
ExpressionStatement:
  ExpressionWithoutBlock ";"
  ExpressionWithBlock ";"?

Expression: (OuterAttribute _)* (ExpressionWithoutBlock | ExpressionWithBlock)
ExpressionWithoutBlock:

  ~ExpressionWithoutBlock _ ("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=") _ ExpressionWithoutBlock

  # Range expressions
  ~ExpressionWithoutBlock _ ".." _ ~ExpressionWithoutBlock | ~ExpressionWithoutBlock _ ".." | ".." _ ~ExpressionWithoutBlock | ".." | ~ExpressionWithoutBlock _ "..=" _ ~ExpressionWithoutBlock | "..=" _ ~ExpressionWithoutBlock

  # Operator expressions
  ExpressionWithoutBlock _ "||" _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ "&&" _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ ("==" | "!=" | ">" | "<" | ">=" | "<=") _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ "|" _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ "^" _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ "&" _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ ("<<" | ">>") _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ ("*" | "/" | "%") _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ ("+" | "-") _ ~ExpressionWithoutBlock
  ExpressionWithoutBlock _ as _ TypeNoBounds
  "&" _ (mut _)? ExpressionWithoutBlock
  "*" _ ExpressionWithoutBlock
  ("-" | "!") _ ExpressionWithoutBlock
  ExpressionWithoutBlock _ "?"

  ExpressionWithoutBlock _ "." _ await
  ExpressionWithoutBlock _ "[" _ $ExpressionWithoutBlock _ "]"
  ExpressionWithoutBlock _ "." _ TupleIndex

  ArrayExpression
  TupleExpression
  StructExpression
  EnumerationVariantExpression

  ExpressionWithoutBlock _ "." _ Identifier
  ExpressionWithoutBlock _ "." _ PathExprSegment _ "(" (CallParams _)? ")"
  ExpressionWithoutBlock _ "(" _ (CallParams _)? ")"
  PathExpression
  GroupedExpression
  LiteralExpression
  MacroInvocation
  (ReturnExpression | BreakExpression | ContinueExpression | ClosureExpression)


ExpressionWithBlock:
  BlockExpression
  AsyncBlockExpression
  UnsafeBlockExpression
  LoopExpression
  IfExpression
  IfLetExpression
  MatchExpression

LiteralExpression: Character | String | RawString | Byte | ByteString | Number | Bool
PathExpression: PathInExpression | QualifiedPathInExpression
BlockExpression: "{" _ (InnerAttribute _)* Statements _ "}"
Statements:
  (Statement _)+
  (Statement _)+ ExpressionWithoutBlock
  ExpressionWithoutBlock
AsyncBlockExpression: async (_ move)? _ BlockExpression
UnsafeBlockExpression: unsafe _ BlockExpression

GroupedExpression: "(" _ (InnerAttribute _)* Expression _ ")"
ArrayExpression: "[" _ (InnerAttribute _)* (ArrayElements _)? "]"
ArrayElements:
  CommaSeparated<Expression>
  Expression _ ";" _ Expression
TupleExpression: "(" _ (InnerAttribute _)* (ArrayElements _)? ")"
TupleElements: CommaSeparated<Expression>
StructExpression:
  StructExprStruct
  StructExprTuple
  StructExprUnit
StructExprStruct: PathInExpression _ "{" _ (InnerAttribute _)* StructExprFields _ "}"
StructExprFields: (StructExprField _ "," _)* (StructField (_ ",")? | StructBase?)
StructExprField:
  Identifier
  (Identifier | TupleIndex) _ ":" _ Expression
StructBase: ".." _ Expression
StructExprTuple: PathInExpression _ "(" _ (InnerAttribute _)* (CommaSeparated<Expression> _)? ")"
StructExprUnit: PathInExpression

EnumerationVariantExpression:
  EnumExprStruct
  EnumExprTuple


  EnumExprUnit
EnumExprStruct: PathInExpression _ "{" _ EnumExprFields _ "}"
EnumExprFields: CommaSeparated<EnumExprField>
EnumExprField:
  Identifier
  (Identifier | TupleIndex) _ ":" _ Expression
EnumExprTuple: PathInExpression _ "(" _ (CommaSeparated<Expression> _)? ")"
EnumExprUnit: PathInExpression

CallParams: CommaSeparated<Expression>

ClosureExpression: (move _)? "|" _ ClosureParameters? _ "|" _ (Expression | "->" _ TypeNoBounds _ BlockExpression)
ClosureParameters: CommaSeparated<ClosureParam>
ClosureParam: (OuterAttribute _)* Pattern (_ ":" _ Type)?

LoopExpression: (LoopLabel _)? (InfiniteLoopExpression | PredicateLoopExpression | PredicatePatternLoopExpression | IteratorLoopExpression)
LoopLabel: LifetimeOrLabel _ ":"
InfiniteLoopExpression: loop _ BlockExpression
PredicateLoopExpression: while _ Expression _ BlockExpression
# TODO: This expression shouldn't be able to be a struct or lazy boolean
PredicatePatternLoopExpression: while _ let _ MatchArmPatterns "=" Expression _ BlockExpression
IteratorLoopExpression: for _ Pattern _ in _ Expression _ BlockExpression

BreakExpression: break (_ LifetimeOrLabel)? (_ Expression)?
ContinueExpression: continue (_ LifetimeOrLabel)?

IfExpression: if _ Expression _ BlockExpression (_ else _ (BlockExpression | IfExpression | IfLetExpression))?
# TODO: This expression shouldn't be able to be a struct or lazy boolean
IfLetExpression: if _ let _ MatchArmPatterns "=" Expression _ BlockExpression (_ else _ (BlockExpression | IfExpression | IfLetExpression))?

MatchExpression: match _ Expression _ "{" _ (InnerAttribute _)* (MatchArms _)? "}"
MatchArms: (MatchArm _ "=>" (ExpressionWithoutBlock _ "," | ExpressionWithBlock (_ ",")?) _)* MatchArm _ "=>" _ Expression (_ ",")?
MatchArm: (OuterAttribute _)* MatchArmPatterns (_ MatchArmGuard)?
MatchArmPatterns: ("|" _)? Pattern (_ "|" _ Pattern)*
MatchArmGuard: if _ Expression

ReturnExpression: return (_ Expression)?

Pattern: '|'? PatternNoTopAlt ('|' PatternNoTopAlt)*
PatternNoTopAlt: PatternWithoutRange | RangePattern
PatternWithoutRange:
  LiteralPattern
  (ref _)? (mut _)? Identifier (_ '@' _ PatternNoTopAlt)?
  '_'
  '..'
  ('&' | '&&') _ (mut _)? PatternWithoutRange
  StructPattern
  TupleStructPattern
  TuplePattern
  '(' _ Pattern _ ')'
  '[' _ (CommaSeparated<Pattern> _)? ']'
  PathExpression
  MacroInvocation

LiteralPattern:
  true | false
  Character
  Byte
  String
  RawString
  ByteString
  RawByteString
  ('-' _)? Integer
  ('-' _)? Float
RangePattern:
  RangePatternBound _ '..=' _ RangePatternBound
  RangePatternBound _ '..'
  '..=' _ RangePatternBound
  RangePatternBound '...' RangePatternBound
RangePatternBound: Character | Byte | ('-' _)? Integer | ('-' _)? Float | PathExpression
StructPattern: PathInExpression _ '{' _ (StructPatternElements _)? '}'
StructPatternElements:
  StructPatternFields (_ ',')?
  (StructPatternFields _ ',' _)? (OuterAttribute _)* '..'
# Can't use CommaSeparated here as we've been finicky with the trailing comma above.
StructPatternFields: StructPatternField (_ ',' _ StructPatternField)*
StructPatternField: (OuterAttribute _)* (TupleIndex _ ':' _ Pattern | Identifier _ ':' _ Pattern | (ref _)? (mut _)? Identifier)
TupleStructPattern: PathInExpression '(' _ (CommaSeparated<Pattern> _)? ')'
TuplePattern: '..' | Pattern _ ',' (_ CommaSeparated<Pattern>)?

Type:
  TypeNoBounds
  impl _ TypeParamBounds
  (dyn _)? TypeParamBounds
TypeNoBounds:
  '(' _ Type _ ')'
  impl _ TraitBound
  (dyn _)? TraitBound
  TypePath
  TupleType
  NeverType
  RawPointerType
  ReferenceType
  ArrayType
  SliceType
  InferredType
  QualifiedPathInType
  BareFunctionType
  MacroInvocation
TupleType: '(' ')' | '(' _ Type _ ',' _ (CommaSeparated<Type> _)? ')'
NeverType: '!'
RawPointerType: '*' _ (mut | const) _ TypeNoBounds
ReferenceType: '&' _ (Lifetime _)? (mut _)? TypeNoBounds
ArrayType: '[' _ Type _ ';' _ Expression _ ']'
SliceType: '[' _ Type _ ']'
InferredType: '_'
BareFunctionType: (ForLifetimes _)? FunctionTypeQualifiers _ fn _ '(' _ (FunctionParametersMaybeNamedVariadic _)? ')' (_ BareFunctionReturnType)?
FunctionTypeQualifiers: (unsafe _)? (extern (_ Abi)?)?
BareFunctionReturnType: "->" _ TypeNoBounds
FunctionParametersMaybeNamedVariadic:
  CommaSeparated<MaybeNamedParam>
  (MaybeNamedParam _ "," _)+ (OuterAttribute _)* "..."
MaybeNamedParam: (OuterAttribute _)* ((Identifier | '_') _ ':' _)? Type

TypeParamBounds: TypeParamBound (_ '+' _ TypeParamBound)* (_ '+')?
TypeParamBound: Lifetime | TraitBound
TraitBound:
  ('?' _)? (ForLifetimes _)? TypePath
  '(' _ ('?' _)? (ForLifetimes _)? TypePath _ ')'
LifetimeBounds: (Lifetime _ '+' _)* Lifetime?
Lifetime: LifetimeOrLabel | StaticLifetime | "'_"
ForLifetimes: for _ GenericParams


SimplePath: ('::' _)? SimplePathSegment (_ '::' _ SimplePathSegment)*
SimplePathSegment: Identifier | super | self | crate | '$crate'

PathInExpression: ('::' _)? PathExprSegment (_ '::' _ PathExprSegment)*
PathExprSegment: PathIdentSegment (_ '::' _ GenericArgs)?
PathIdentSegment: Identifier | super | self | Self | crate | '$crate'
GenericArgs:
  '<' '>'
  '<' _ CommaSeparated<GenericArg> _ '>'
GenericArg: Lifetime | Type | GenericArgsConst | GenericArgsBinding
GenericArgsConst: BlockExpression | LiteralExpression | '-' _ LiteralExpression | SimplePathSegment
GenericArgsBinding: Identifier _ '=' _ Type

QualifiedPathInExpression: QualifiedPathType (_ '::' _ PathExprSegment)+
QualifiedPathType: '<' _ Type _ (as _ TypePath _)? '>'
QualifiedPathInType: QualifiedPathType (_ '::' _ TypePathSegment)+

TypePath: ('::' _)? TypePathSegment (_ '::' _ TypePathSegment)*
TypePathSegment: PathIdentSegment ((_ '::')? _ (GenericArgs | TypePathFn))?
TypePathFn: '(' _ (CommaSeparated<Type> _)? ')' ('->' Type)?


Visibility: pub ( _ '(' _ (crate | self | super | in SimplePath) _ ')')?
